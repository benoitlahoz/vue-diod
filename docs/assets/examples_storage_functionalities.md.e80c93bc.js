import{_ as a,o,c as i,a as e,b as r,t as s,d as n}from"./app.210f4970.js";let _=JSON.parse(`{"title":"Functionalities","description":"","frontmatter":{"title":"Functionalities"},"headers":[{"level":2,"title":"Store","slug":"store","link":"#store","children":[]},{"level":2,"title":"Save","slug":"save","link":"#save","children":[]},{"level":2,"title":"Let's go!","slug":"let-s-go","link":"#let-s-go","children":[]}],"relativePath":"examples/storage/functionalities.md"}`),l={name:"examples/storage/functionalities.md"},c={id:"frontmatter-title",tabindex:"-1"},d=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),h=n('<p>On the base of our <a href="./user-stories">User Stories</a> we can now define the functionalities we will have to implement.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>For the sake of not overengineering our example, we will keep functionalities in concrete class methods, but we could also create a specific <strong>use case</strong> service for each functionality.</p></div><h2 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-hidden="true">#</a></h2><ul><li><p><strong>US1</strong>: We can use browser&#39;s <code>localStorage.setItem</code> for this purpose.</p></li><li><p><strong>US2</strong>: We can use browser&#39;s <code>localStorage.getItem</code>, but we&#39;ll have to provide a way to recognize data stored specifically by this application / page: maybe we can <strong>prefix</strong> the data&#39;s key with an unique string corresponding to our application.</p></li><li><p><strong>US3</strong>: We can use browser&#39;s <code>localStorage.removeItem</code>.</p></li><li><p><strong>US4</strong>: <code>localStorage</code> only stores <code>string</code>, we will have to implement an an adapter to convert <code>string</code> in <code>number</code> when the value is only a number.</p></li><li><p><strong>US5</strong>: In Vue.js context, we&#39;ll expose a reactive object as <code>Ref</code>.</p></li></ul><h2 id="save" tabindex="-1">Save <a class="header-anchor" href="#save" aria-hidden="true">#</a></h2><ul><li><p><strong>US6</strong>: We will have to transform the data so it can be written to a file, then create an hidden download link and trigger it. To use it locally, we can choose to write file in standard <code>JSON</code> format.</p></li><li><p><strong>US7</strong>: We can parse the current <code>Date</code> and set the file&#39;s name with this date.</p></li></ul><h2 id="let-s-go" tabindex="-1">Let&#39;s go! <a class="header-anchor" href="#let-s-go" aria-hidden="true">#</a></h2><p>Let&#39;s now create the abstractions that will be implemented by our services:</p><ul><li>Store and retrieve data with reliable types.</li><li>Save this data to a file.</li></ul>',9);function p(t,u,g,f,m,w){return o(),i("div",null,[e("h1",c,[r(s(t.$frontmatter.title)+" ",1),d]),h])}let b=a(l,[["render",p]]);export{_ as __pageData,b as default};
