import{_ as o,o as i,c as n,a as e,b as a,t as r,d as s}from"./app.ba1d7daa.js";let b=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"title":"Introduction"},"headers":[],"relativePath":"examples/storage/introduction.md"}'),l={name:"examples/storage/introduction.md"},d={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),h=s("<p>Here we will build a component that will allow a <code>Client</code> to store data in her browser&#39;s local storage, to get it back while preserving data type (<code>string</code> or <code>number</code>) and to save it to a local file.</p><p>To keep the different parts of our application decoupled, we will first define <strong>abstractions</strong> that expose the functionalities we want to implement (<strong>use cases</strong>). Then, our component will bind these abstractions with some implementations, which will be consumed by its children components only knowing about the abstrations.</p><p>Each child will <code>inject</code> given implementation by calling the abstraction as key. This will allow us to change implementation at main component level, without any modification of the children code.</p><p>At the end, we will be able to <strong>compose</strong> our main component with children being using the provided implementations.</p>",4);function p(t,m,_,u,w,f){return i(),n("div",null,[e("h1",d,[a(r(t.$frontmatter.title)+" ",1),c]),h])}let T=o(l,[["render",p]]);export{b as __pageData,T as default};
