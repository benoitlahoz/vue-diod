{
  "version": 3,
  "sources": ["../../../../node_modules/diod/lib/diod.es.js"],
  "sourcesContent": ["var RegistrationType = /* @__PURE__ */ ((RegistrationType2) => {\n  RegistrationType2[\"Class\"] = \"class\";\n  RegistrationType2[\"Factory\"] = \"factory\";\n  RegistrationType2[\"Instance\"] = \"instance\";\n  return RegistrationType2;\n})(RegistrationType || {});\n\nvar ScopeType = /* @__PURE__ */ ((ScopeType2) => {\n  ScopeType2[\"Transient\"] = \"transient\";\n  ScopeType2[\"Request\"] = \"request\";\n  ScopeType2[\"Singleton\"] = \"singleton\";\n  return ScopeType2;\n})(ScopeType || {});\n\nclass DiodContainer {\n  constructor(services) {\n    this.services = services;\n    this.singletons = /* @__PURE__ */ new Map();\n  }\n  get(identifier) {\n    return this.getService(\n      identifier,\n      /* @__PURE__ */ new Map(),\n      false\n    );\n  }\n  findTaggedServiceIdentifiers(tag) {\n    return Array.from(this.services).filter(([, data]) => data.tags.indexOf(tag) >= 0).map(([id]) => id);\n  }\n  getService(identifier, perRequestServices, isDependency) {\n    const data = this.findServiceDataOrThrow(identifier, isDependency);\n    if (data.scope === ScopeType.Singleton && this.singletons.has(identifier)) {\n      return this.singletons.get(identifier);\n    } else if (data.scope === ScopeType.Request && perRequestServices.has(identifier)) {\n      return perRequestServices.get(identifier);\n    }\n    let instance;\n    if (data.type === RegistrationType.Instance) {\n      instance = data.instance;\n    } else if (data.type === RegistrationType.Class) {\n      const dependencies = this.getDependencies(\n        data.dependencies,\n        perRequestServices\n      );\n      instance = new data.class(...dependencies);\n    } else {\n      instance = data.factory({\n        get: (id) => {\n          return this.getService(id, perRequestServices, true);\n        },\n        findTaggedServiceIdentifiers: (tag) => this.findTaggedServiceIdentifiers(tag)\n      });\n    }\n    if (data.scope === ScopeType.Singleton) {\n      this.singletons.set(identifier, instance);\n    } else if (data.scope === ScopeType.Request) {\n      perRequestServices.set(identifier, instance);\n    }\n    return instance;\n  }\n  findServiceDataOrThrow(identifier, isDependency) {\n    const service = this.services.get(identifier);\n    if (!service) {\n      throw new Error(`Service not registered for: ${identifier.name}`);\n    }\n    const data = service;\n    if (!isDependency && data.isPrivate) {\n      throw new Error(\n        `The ${identifier.name} service has been registered as private and can not be directly get from the container`\n      );\n    }\n    return service;\n  }\n  getDependencies(dependencyIdentifiers, perRequestServices) {\n    const dependencies = new Array();\n    for (const dependencyIdentifier of dependencyIdentifiers) {\n      dependencies.push(\n        this.getService(dependencyIdentifier, perRequestServices, true)\n      );\n    }\n    return dependencies;\n  }\n}\n\nconst PARAM_TYPES = \"design:paramtypes\";\nconst getDependenciesFromDecoratedServiceOrThrow = (target, parents) => {\n  const dependencies = Reflect.getMetadata(PARAM_TYPES, target) || [];\n  if (dependencies.length < target.length) {\n    throw new Error(\n      `Service not decorated: ${[...parents, target.name].join(\" -> \")}`\n    );\n  }\n  return dependencies;\n};\nconst getBaseClass = (target) => {\n  const baseClass = Object.getPrototypeOf(target.prototype).constructor;\n  if (baseClass === Object) {\n    return void 0;\n  }\n  return baseClass;\n};\nconst getDependencies = (target, parents = []) => {\n  const dependencies = getDependenciesFromDecoratedServiceOrThrow(\n    target,\n    parents\n  );\n  if (dependencies.length > 0) {\n    return dependencies;\n  }\n  const baseClass = getBaseClass(target);\n  if (baseClass) {\n    return getDependencies(baseClass, [...parents, target.name]);\n  }\n  return [];\n};\nconst getDependencyCount = (target) => {\n  if (target.length > 0) {\n    return target.length;\n  }\n  const baseClass = getBaseClass(target);\n  if (baseClass) {\n    return getDependencyCount(baseClass);\n  }\n  return 0;\n};\n\nclass ServiceConfiguration {\n  constructor() {\n    this.isPrivate = false;\n    this.tags = [];\n  }\n  public() {\n    this.isPrivate = false;\n    return this;\n  }\n  private() {\n    this.isPrivate = true;\n    return this;\n  }\n  addTag(tag) {\n    this.tags = [...this.tags, tag];\n    return this;\n  }\n  asTransient() {\n    this.scope = ScopeType.Transient;\n    return this;\n  }\n  asSingleton() {\n    this.scope = ScopeType.Singleton;\n    return this;\n  }\n  asInstancePerRequest() {\n    this.scope = ScopeType.Request;\n    return this;\n  }\n}\n\nclass ClassConfiguration extends ServiceConfiguration {\n  constructor(newable) {\n    super();\n    this.newable = newable;\n    this.scope = ScopeType.Transient;\n    this.dependencies = [];\n    this.autowire = true;\n  }\n  withDependencies(dependencies) {\n    this.dependencies = dependencies;\n    this.autowire = false;\n    return this;\n  }\n  asTransient() {\n    return super.asTransient();\n  }\n  asSingleton() {\n    return super.asSingleton();\n  }\n  asInstancePerRequest() {\n    return super.asInstancePerRequest();\n  }\n  setDependencyInformationIfNotExist(identifier, options) {\n    const autowire = options.autowire && this.autowire;\n    if (!autowire && getDependencyCount(this.newable) > this.dependencies.length) {\n      throw new Error(\n        `Dependencies must be provided for non autowired services. Service with missing dependencies: ${identifier.name}`\n      );\n    }\n    if (autowire) {\n      this.dependencies = getDependencies(this.newable);\n    }\n  }\n  build(options) {\n    this.setDependencyInformationIfNotExist(this.newable, options);\n    return {\n      tags: this.tags,\n      isPrivate: this.isPrivate,\n      scope: this.scope,\n      type: RegistrationType.Class,\n      class: this.newable,\n      dependencies: this.dependencies,\n      autowire: this.autowire\n    };\n  }\n  static createBuildable(newable) {\n    const use = new ClassConfiguration(newable);\n    return {\n      instance: use,\n      build: (options) => use.build(options)\n    };\n  }\n}\n\nclass FactoryConfiguration extends ServiceConfiguration {\n  constructor(factory) {\n    super();\n    this.factory = factory;\n    this.scope = ScopeType.Transient;\n  }\n  asTransient() {\n    return super.asTransient();\n  }\n  asSingleton() {\n    return super.asSingleton();\n  }\n  asInstancePerRequest() {\n    return super.asInstancePerRequest();\n  }\n  build() {\n    return {\n      tags: this.tags,\n      isPrivate: this.isPrivate,\n      scope: this.scope,\n      type: RegistrationType.Factory,\n      factory: this.factory,\n      dependencies: []\n    };\n  }\n  static createBuildable(factory) {\n    const use = new FactoryConfiguration(factory);\n    return {\n      instance: use,\n      build: () => use.build()\n    };\n  }\n}\n\nclass InstanceConfiguration extends ServiceConfiguration {\n  constructor(instance) {\n    super();\n    this.instance = instance;\n    this.scope = ScopeType.Singleton;\n  }\n  build() {\n    return {\n      tags: this.tags,\n      isPrivate: this.isPrivate,\n      scope: this.scope,\n      type: RegistrationType.Instance,\n      instance: this.instance,\n      dependencies: []\n    };\n  }\n  static createBuildable(instance) {\n    const use = new InstanceConfiguration(instance);\n    return {\n      instance: use,\n      build: () => use.build()\n    };\n  }\n}\n\nclass DiodRegistration {\n  constructor(identifier) {\n    this.identifier = identifier;\n  }\n  useClass(newable) {\n    const buildable = ClassConfiguration.createBuildable(newable);\n    this.buildable = buildable;\n    return buildable.instance;\n  }\n  use(newable) {\n    return this.useClass(newable);\n  }\n  useInstance(instance) {\n    const buildable = InstanceConfiguration.createBuildable(instance);\n    this.buildable = buildable;\n    return buildable.instance;\n  }\n  useFactory(factory) {\n    const buildable = FactoryConfiguration.createBuildable(factory);\n    this.buildable = buildable;\n    return buildable.instance;\n  }\n  build(options) {\n    if (this.buildable === void 0) {\n      throw new Error(\n        `Service ${this.identifier.name} registration is not completed. Use .registerAndUse(${this.identifier.name}) instead of .register(${this.identifier.name}) to use it directly or set any other registration use`\n      );\n    }\n    return this.buildable.build(options);\n  }\n  static createBuildable(identifier) {\n    const registration = new DiodRegistration(identifier);\n    return {\n      instance: registration,\n      build: (options) => registration.build(options)\n    };\n  }\n}\n\nconst verifyMetadata = (identifier, metadata, services) => {\n  const missing = new Array();\n  for (const dependencyIdentifier of metadata.dependencies) {\n    if (!services.has(dependencyIdentifier)) {\n      missing.push(dependencyIdentifier.name);\n    }\n  }\n  if (missing.length > 0) {\n    throw new Error(\n      `Service not registered for the following dependencies of ${identifier.name}: ${missing.join(\", \")}`\n    );\n  }\n};\nconst verifyCircularDependencies = (identifier, metadata, services, dependencyTree = []) => {\n  for (const dependencyIdentifier of metadata.dependencies) {\n    if (identifier === dependencyIdentifier) {\n      throw new Error(\n        `Circular dependency detected: ${[\n          identifier.name,\n          ...dependencyTree,\n          identifier.name\n        ].join(\" -> \")}`\n      );\n    }\n    const dependencyMetadata = services.get(\n      dependencyIdentifier\n    );\n    if (dependencyMetadata.dependencies.length > 0) {\n      verifyCircularDependencies(identifier, dependencyMetadata, services, [\n        ...dependencyTree,\n        dependencyIdentifier.name\n      ]);\n    }\n  }\n};\nconst verifyAllServices = (services, callback) => {\n  for (const [identifier, metadata] of services) {\n    callback(identifier, metadata, services);\n  }\n};\nconst verify = (services) => {\n  verifyAllServices(services, verifyMetadata);\n  verifyAllServices(services, verifyCircularDependencies);\n};\n\nclass ContainerBuilder {\n  constructor() {\n    this.buildables = /* @__PURE__ */ new Map();\n  }\n  register(identifier) {\n    if (this.buildables.has(identifier)) {\n      throw new Error(\n        `A service identified as ${identifier.name} has been already registered. You need to unregister it before you can register it again.`\n      );\n    }\n    const buildable = DiodRegistration.createBuildable(identifier);\n    this.buildables.set(identifier, buildable);\n    return buildable.instance;\n  }\n  unregister(identifier) {\n    if (!this.buildables.has(identifier)) {\n      throw new Error(`There is no service registered as ${identifier.name}.`);\n    }\n    this.buildables.delete(identifier);\n  }\n  isRegistered(identifier) {\n    return this.buildables.has(identifier);\n  }\n  registerAndUse(newable) {\n    return this.register(newable).use(newable);\n  }\n  build({ autowire = true } = {}) {\n    const services = /* @__PURE__ */ new Map();\n    for (const [identifier, buildable] of this.buildables) {\n      const data = buildable.build({ autowire });\n      services.set(identifier, data);\n    }\n    verify(services);\n    return new DiodContainer(services);\n  }\n}\n\nconst Service = () => {\n  return (target) => {\n    return target;\n  };\n};\n\nexport { ContainerBuilder, Service };\n"],
  "mappings": "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",
  "names": []
}
